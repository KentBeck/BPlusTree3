name: Build Wheels

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up QEMU (for ARM builds on Linux)
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        # Build for CPython 3.8-3.12
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        
        # Skip PyPy and musllinux for now (C extension complexity)
        CIBW_SKIP: "pp* *-musllinux*"
        
        # Configure architectures
        CIBW_ARCHS_LINUX: x86_64 aarch64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: AMD64
        
        # Test command to verify wheels work
        CIBW_TEST_COMMAND: "python -c \"import bplustree; tree = bplustree.BPlusTreeMap(); tree[1] = 'test'; assert tree[1] == 'test'; print('Wheel test passed!')\""
        
        # Install test dependencies
        CIBW_TEST_REQUIRES: pytest
        
        # Build settings
        CIBW_BUILD_VERBOSITY: 1
        
        # Environment variables for compilation
        CIBW_ENVIRONMENT: >
          BPLUSTREE_C_FAST_MATH=1
        
        # Linux-specific settings
        CIBW_BEFORE_BUILD_LINUX: >
          yum install -y gcc ||
          apt-get update && apt-get install -y gcc ||
          apk add gcc musl-dev
        
        # macOS-specific settings  
        CIBW_ENVIRONMENT_MACOS: >
          MACOSX_DEPLOYMENT_TARGET=10.14
          BPLUSTREE_C_FAST_MATH=1
        
        # Windows-specific settings
        CIBW_BEFORE_BUILD_WINDOWS: >
          pip install --upgrade setuptools wheel
      with:
        package-dir: python
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl
        retention-days: 30

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build sdist
      run: |
        cd python
        python -m build --sdist
    
    - name: Check sdist
      run: |
        cd python
        twine check dist/*.tar.gz
    
    - name: Test sdist installation
      run: |
        cd python
        pip install dist/*.tar.gz
        python -c "import bplustree; print('SDist test passed!')"
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: python/dist/*.tar.gz
        retention-days: 30

  test_wheels:
    name: Test wheels on ${{ matrix.os }} Python ${{ matrix.python-version }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: wheelhouse
    
    - name: Install wheel
      run: |
        pip install --find-links wheelhouse bplustree3
    
    - name: Test installation
      run: |
        python -c "
        import bplustree
        print(f'Implementation: {bplustree.get_implementation()}')
        
        # Test basic functionality
        tree = bplustree.BPlusTreeMap(capacity=32)
        
        # Test insertions
        for i in range(1000):
            tree[i] = f'value_{i}'
        
        assert len(tree) == 1000
        assert tree[500] == 'value_500'
        
        # Test range queries
        results = list(tree.range(100, 200))
        assert len(results) == 100
        
        # Test deletion
        del tree[500]
        assert len(tree) == 999
        
        print('All tests passed!')
        "

  check_wheel_quality:
    name: Check wheel quality
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality check tools
      run: |
        pip install twine check-wheel-contents auditwheel
    
    - name: List built packages
      run: |
        ls -la dist/
        echo "Wheels:"
        ls -la dist/*.whl || echo "No wheels found"
        echo "SDist:"
        ls -la dist/*.tar.gz || echo "No sdist found"
    
    - name: Check package quality with twine
      run: |
        twine check dist/*
    
    - name: Check wheel contents
      run: |
        for wheel in dist/*.whl; do
          echo "Checking $wheel"
          check-wheel-contents "$wheel"
        done
    
    - name: Audit Linux wheels
      if: runner.os == 'Linux'
      run: |
        for wheel in dist/*linux*.whl; do
          if [[ -f "$wheel" ]]; then
            echo "Auditing $wheel"
            auditwheel show "$wheel"
          fi
        done

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist, test_wheels, check_wheel_quality]
    runs-on: ubuntu-latest
    # Only upload on tagged releases
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: pypi
      url: https://pypi.org/p/bplustree3
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist
    
    - name: List packages to upload
      run: |
        ls -la dist/
        echo "Total packages: $(ls dist/ | wc -l)"
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
        print-hash: true

  upload_test_pypi:
    name: Upload to Test PyPI
    needs: [build_wheels, build_sdist, test_wheels, check_wheel_quality]
    runs-on: ubuntu-latest
    # Upload to Test PyPI on pushes to main or manual dispatch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: 
      name: testpypi
      url: https://test.pypi.org/p/bplustree3
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist
    
    - name: List packages to upload
      run: |
        ls -la dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        verbose: true
        skip-existing: true