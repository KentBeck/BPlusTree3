name: Build Python Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'python-v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'python/**'
      - '.github/workflows/python-wheels.yml'
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      with:
        package-dir: ./python
        output-dir: ./python/wheelhouse
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-musllinux_* pp*"
        CIBW_ARCHS_LINUX: "auto aarch64"
        CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
        CIBW_ARCHS_WINDOWS: "auto"
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: "cd {project}/python && python -m pytest tests/test_dictionary_api.py"
        CIBW_BEFORE_BUILD_LINUX: "pip install cython"
        CIBW_BEFORE_BUILD_MACOS: "pip install cython"
        CIBW_BEFORE_BUILD_WINDOWS: "pip install cython"
        CIBW_BUILD_VERBOSITY: 1

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: python-wheels-${{ matrix.os }}
        path: ./python/wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build cython

    - name: Build sdist
      run: |
        cd python
        python -m build --sdist

    - name: Upload sdist
      uses: actions/upload-artifact@v3
      with:
        name: python-sdist
        path: python/dist/*.tar.gz

  test_wheels:
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: python-wheels-${{ matrix.os }}
        path: ./python/wheelhouse

    - name: Install wheel
      run: |
        python -m pip install --upgrade pip
        pip install --find-links ./python/wheelhouse bplustree3
        
    - name: Test installed package
      run: |
        cd /  # Change to root to ensure we're not importing from source
        python -c "from bplus_tree import BPlusTreeMap; tree = BPlusTreeMap(); tree[1] = 'test'; print(f'Success: {tree[1]}')"
        python -c "from bplus_tree import get_implementation; print(f'Implementation: {get_implementation()}')"

  publish:
    needs: [test_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/python-v')
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: dist/

    - name: Flatten directory structure
      run: |
        mkdir -p final_dist
        find dist -name "*.whl" -o -name "*.tar.gz" | xargs -I {} cp {} final_dist/
        ls -la final_dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        packages-dir: final_dist/
        skip-existing: true

    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: final_dist/